import typing as t
from os.path import splitext
from discord import Embed, Message, NotFound
from discord.ext.commands import Cog
from Bronn import Bot
from log import get_logger
import discord

log = get_logger(__name__)

BLOCKED_MESSAGE = (
    "It looks like you tried to attach file type(s) that we do not allow ({blocked_extensions_str}). "
    "Therefore, your message has been removed."
    "We currently allow the following file types: **{joined_whitelist}**.\n\n"
)


class AntiMalware(discord.Cog):
    """Checks and delete messages that contain non-whitelisted file extensions."""

    def __init__(self, bot: Bot):
        self.bot = bot

    def _get_whitelisted_files(self, guild_id) -> list:
        """Get the file extensions currently on the whitelist."""
        x = [k for k, v in self.bot.filter_list_cache[f"{guild_id}"].items() if v["allow"] is True]
        print(x)
        return x

    def _get_disallowed_files(self, message: Message) -> t.Iterable[str]:
        """Get an iterable containing all the disallowed extensions of attachments."""
        file_extensions = {splitext(attachment.filename.lower())[1] for attachment in message.attachments}
        files_blocked = file_extensions - set(self._get_whitelisted_files(message.guild.id))
        return files_blocked

    @Cog.listener()
    async def on_message(self, message: Message) -> None:
        """Identify messages with unauthorized files."""

        # Return when message don't have files and don't moderate DMs
        if not message.attachments or not message.guild:
            return

        # Ignore webhook and bot messages
        if message.webhook_id or message.author.bot:
            return

        # Check if user is staff, if is, return
        # Since we only care that roles exist to iterate over, check for the attr rather than a User/Member instance
        # if hasattr(message.author, "roles") and any(role.id in Filter.role_whitelist for role in message.author.roles):
        #     return

        embed = Embed()
        files_blocked = self._get_disallowed_files(message)
        blocked_extensions_str = ", ".join(files_blocked)
        if files_blocked:
            # meta_channel = self.bot.get_channel(Channels.meta)
            embed.description = BLOCKED_MESSAGE.format(
                joined_whitelist=", ".join(self._get_whitelisted_files(message.guild.id)),
                blocked_extensions_str=blocked_extensions_str,
                # meta_channel_mention=meta_channel.mention,
            )

        if embed.description:
            log.info(
                f"User '{message.author}' ({message.author.id}) uploaded blacklisted file(s): {blocked_extensions_str}",
                extra={"attachment_list": [attachment.filename for attachment in message.attachments]},
            )

            await message.channel.send(f"Hey {message.author.mention}!", embed=embed)

            # Delete the offending message:
            try:
                await message.delete()
            except NotFound:
                log.info(f"Tried to delete message `{message.id}`, but message could not be found.")


def setup(bot) -> None:
    """Load the AntiMalware cog."""
    bot.add_cog(AntiMalware(bot))
